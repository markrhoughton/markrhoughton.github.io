<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>swift on</title><link>http://example.org/tags/swift/</link><description>Recent content in swift on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 26 Sep 2022 17:53:03 +0100</lastBuildDate><atom:link href="http://example.org/tags/swift/index.xml" rel="self" type="application/rss+xml"/><item><title>Closures</title><link>http://example.org/posts/closures/</link><pubDate>Mon, 26 Sep 2022 17:53:03 +0100</pubDate><guid>http://example.org/posts/closures/</guid><description>When writing functions that expect functions as arguments
func calculator(numberA: Int, numberB: Int, operation: (Int, Int) -&amp;gt; Int) -&amp;gt; Int { return operation(numberA, numberB) } rather than writing the expected argument as an explicit named function
func addOperation(nA: Int, nB: Int) -&amp;gt; Int { return nA + nB } and calling it like
calculator(numberA: 8, numberB: 3, operation: addOperation) we can pass it as a closure instead
calculator(numberA: 8, numberB: 3, operation: { (nA: Int, nB: Int) -&amp;gt; Int in return nA + nB }) which can be simplified in a number of ways.</description></item></channel></rss>